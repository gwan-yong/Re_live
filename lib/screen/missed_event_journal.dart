import 'dart:io';
import 'package:drift/drift.dart' as drift;
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:re_live/screen/camera_screen.dart';
import '../controller/db_complete_schedule_controller.dart';
import '../database/drift_database.dart';
import '../notification.dart';
import '../theme/colors.dart';
import 'home_screen.dart';

class MissedEventJournal extends StatefulWidget {
  final int scheduledId;
  final String title;
  final String startTime;
  final bool endUsed;
  final String endTime;
  final Color color;

  const MissedEventJournal({
    Key? key,
    required this.scheduledId,
    required this.title,
    required this.startTime,
    required this.endUsed,
    required this.endTime,
    required this.color,
  }) : super(key: key);

  @override
  State<MissedEventJournal> createState() => _MissedEventJournalState();
}

class _MissedEventJournalState extends State<MissedEventJournal> {
  String rearImagePath = '';
  String frontImagePath = '';
  final TextEditingController _lateCommentController = TextEditingController();

  void _goToCameraScreen() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CameraScreen(fromMissedEvent: true),
      ),
    );

    if (result != null && result is Map<String, String>) {
      setState(() {
        rearImagePath = result['rearImagePath'] ?? '';
        frontImagePath = result['frontImagePath'] ?? '';
      });
    }
  }

  Future<String> _saveImageToInternalStorage(File imageFile, String label) async {
    final dir = await getApplicationSupportDirectory();
    final photoDir = Directory('${dir.path}/app_data/photos');
    if (!await photoDir.exists()) {
      await photoDir.create(recursive: true);
    }

    final timestamp = DateTime.now().toIso8601String().replaceAll(':', '-');
    final fileName = '${label}_$timestamp.jpg';

    final newPath = '${photoDir.path}/$fileName';
    final newFile = await imageFile.copy(newPath);

    return newFile.path;
  }

  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(title: Text("ÎÜìÏπú ÏùºÏ†ï Í∏∞Î°ù"), backgroundColor: Colors.white),
      body: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Container(
              margin: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              child: Text('ÏÜåÌôîÌïòÏßÄ Î™ªÌïú ÏùºÏ†ï'),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 10.0),
              child: Container(
                decoration: BoxDecoration(
                  color: widget.color,
                  borderRadius: BorderRadius.circular(16),
                ),
                width: double.infinity,
                height: 90,
                padding: EdgeInsets.all(16),
                margin: EdgeInsets.symmetric(vertical: 5),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(widget.title, style: TextStyle(fontSize: 25)),
                    Row(
                      children: [
                        Text(widget.startTime),
                        if (widget.endUsed) Text(" ~ ${widget.endTime}"),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            Container(
              margin: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              child: Text('ÏùºÏ†ïÏùÑ Í∏∞Î°ùÌïòÏßÄ Î™ªÌïú ÏÇ¨Ïú†'),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 10),
              child: TextField(
                controller: _lateCommentController,
                onTapOutside:
                    (event) => FocusManager.instance.primaryFocus?.unfocus(),
                minLines: 1,
                maxLines: null,
                style: TextStyle(
                  color: Colors.black.withOpacity(0.6),
                  fontSize: 20,
                ),
                decoration: InputDecoration(
                  filled: true,
                  fillColor: secondaryColor,
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(16),
                    borderSide: BorderSide.none,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(16),
                    borderSide: BorderSide.none,
                  ),
                  hintText: "ÏΩîÎ©òÌä∏...",
                  hintStyle: TextStyle(
                    color: Colors.black.withOpacity(0.6),
                    fontSize: 20,
                  ),
                ),
              ),
            ),
            if (rearImagePath != '' || frontImagePath != '')
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Center(
                  child: _PreviewPhotos(rearImagePath, frontImagePath),
                ),
              ),
            GestureDetector(
              onTap: _goToCameraScreen,
              child: Container(
                margin: EdgeInsets.symmetric(horizontal: 10.0, vertical: 10),
                width: 348,
                height: 50,
                decoration: BoxDecoration(
                  color: secondaryColor,
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Center(child: Text('ÏßÄÍ∏àÏù¥ÎùºÎèÑ ÏÇ¨ÏßÑ Îì±Î°ù üì∏')),
              ),
            ),
            GestureDetector(
              onTap: () async {
                // ÌÖçÏä§Ìä∏ ÌïÑÎìúÏóê Í∏ÄÏûêÍ∞Ä ÌïòÎÇò Ïù¥ÏÉÅ ÏûàÏñ¥Ïïº Îì±Î°ù Í∞ÄÎä•
                if (_lateCommentController.text.trim().isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('ÏΩîÎ©òÌä∏Î•º ÏûÖÎ†•Ìï¥Ïïº Îì±Î°ùÌï† Ïàò ÏûàÏñ¥Ïöî!')),
                  );
                  return;
                }

                String? rearPath;
                String? frontPath;

                // rearImagePathÍ∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏúºÎ©¥ Ï†ÄÏû•
                if (rearImagePath.isNotEmpty) {
                  rearPath = await _saveImageToInternalStorage(
                    File(rearImagePath),
                    "rear",
                  );
                  print("Ï†ÄÏû•Îêú ÌõÑÎ©¥ ÏÇ¨ÏßÑ Í≤ΩÎ°ú: $rearPath");
                }

                // frontImagePathÍ∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏúºÎ©¥ Ï†ÄÏû•
                if (frontImagePath.isNotEmpty) {
                  frontPath = await _saveImageToInternalStorage(
                    File(frontImagePath),
                    "front",
                  );
                  print("Ï†ÄÏû•Îêú Ï†ÑÎ©¥ ÏÇ¨ÏßÑ Í≤ΩÎ°ú: $frontPath");
                }

                // CompleteScheduled ÌÖåÏù¥Î∏îÏóê Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
                final newCompleteSchedule = CompletedScheduledCompanion(
                  scheduledId: drift.Value(widget.scheduledId),
                  frontImgPath: drift.Value(frontPath ?? ''), // ÏóÜÏúºÎ©¥ Îπà Î¨∏ÏûêÏó¥
                  rearImgPath: drift.Value(rearPath ?? ''),   // ÏóÜÏúºÎ©¥ Îπà Î¨∏ÏûêÏó¥
                  takenAt: drift.Value(DateTime.now()),
                  lateComment: drift.Value(_lateCommentController.text.trim()),
                );

                await DbCompleteScheduleController.to.addCompleteSchedule(newCompleteSchedule);

                // ÏïåÎ¶º Ï†úÍ±∞
                await notifications.cancel(widget.scheduledId + 10000);
                print('ÏùºÏ†ï ÏôÑÎ£å Ï≤òÎ¶¨Îê®');

                // ÌôàÏúºÎ°ú Ïù¥Îèô
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => HomeScreen()),
                );
              },
              child: Container(
                margin: EdgeInsets.symmetric(horizontal: 10.0),
                width: 348,
                height: 50,
                decoration: BoxDecoration(
                  color: secondaryColor,
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Center(child: Text('ÎÜìÏπú ÏùºÏ†ï Í∏∞Î°ù Îì±Î°ù')),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _PreviewPhotos(String rearImagePath, String frontImagePath) {
    return SizedBox(
      width: 226,
      height: 328,
      child: Stack(
        children: [
          Container(
            width: double.infinity,
            height: double.infinity,
            margin: const EdgeInsets.symmetric(horizontal: 5),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.black, width: 3),
              borderRadius: BorderRadius.circular(16),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(13),
              child: Image.file(File(rearImagePath), fit: BoxFit.cover),
            ),
          ),
          Positioned(
            bottom: 5,
            right: 10,
            child: Container(
              width: 85,
              height: 122,
              decoration: BoxDecoration(
                border: Border.all(color: Colors.black, width: 3),
                borderRadius: BorderRadius.circular(16),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(13),
                child: Image.file(File(frontImagePath), fit: BoxFit.cover),
              ),
            ),
          ),
        ],
      ),
    );
  }
}